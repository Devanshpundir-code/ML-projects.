{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "digit guesser ml project ",
      "provenance": [],
      "authorship_tag": "ABX9TyNcPWioQMHm1SNeGYJgnCdN",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Devanshpundir-code/ML-projects./blob/main/digit%20guesser%20ml%20project\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kcDrx9V-wRQZ"
      },
      "source": [
        "from sklearn.datasets import fetch_openml\r\n",
        "%matplotlib inline\r\n",
        "from matplotlib import pyplot as plt\r\n",
        "import matplotlib\r\n",
        "import numpy as np\r\n",
        "from sklearn.linear_model import LogisticRegression"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YTf3zLZGxHW1"
      },
      "source": [
        "#### fetching data"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EMXvVUmOwe_L"
      },
      "source": [
        "mnist = fetch_openml('mnist_784')\r\n",
        "x = mnist['data']\r\n",
        "y =  mnist['target']"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "LAOamJrixo83",
        "outputId": "139a04cd-d006-42e2-fb14-5de6698ff87b"
      },
      "source": [
        "plot_this = x[65584]\r\n",
        "plot_this_image = plot_this.reshape(28, 28)\r\n",
        "plt.imshow(plot_this_image, cmap=matplotlib.cm.binary , interpolation=\"nearest\")\r\n",
        "plt.axis(\"off\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(-0.5, 27.5, 27.5, -0.5)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 3
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAOcAAADnCAYAAADl9EEgAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAGqUlEQVR4nO3dv0tV/wPH8Xu/VAZhYPQhhEQoi6IicgmxIYIapCRo7C8IbCgaLEiIhpZCCtr6B2pricBCa7GwcKqWWl1qioJ0uZ/pO3097/vtXn+8vD4eYy/OuQfkyYHeXK03Go0akOc/6/0AwPLECaHECaHECaHECaG2NNn9Vy6svvpy/+jNCaHECaHECaHECaHECaHECaHECaHECaHECaHECaHECaHECaHECaHECaHECaHECaHECaHECaHECaHECaHECaHECaHECaHECaHECaHECaHECaHECaHECaHECaHECaHECaHECaHECaHECaHECaHECaHECaG2rPcDdKKFhYXifv/+/cptcnKyeO327duL+8TERHEfGhoq7qdPny7urB1vTgglTgglTgglTgglTgglTgglTghVbzQapb04sryRkZHi/vLlyzV6kv+1devW4l46Rx0fHy9e293d3dIz/dfFixcrt71797Z173D15f7RmxNCiRNCiRNCiRNCiRNCiRNCOUppwcOHD4t7syOHxcXFlXycv9Lk512r15f9X/01sXv37srt2rVrxWtv3ry50o+zlhylwEYiTgglTgglTgglTgglTgglTgjlnLMFJ0+eLO5zc3Nr9CR/L/mcs6Srq6u43759u7jfunVrJR9npTnnhI1EnBBKnBBKnBBKnBBKnBBKnBDKOecyZmZmivvo6Ghx//XrV8ufPTAwUNy/fv3a8r1rtVqtv7+/uB84cKByGxwcLF57+PDh4v7o0aPiPj8/X9xL/vnnn+L+4cOH4t7X19fyZ68A55ywkYgTQokTQokTQokTQokTQokTQm1Z7wdYDz9+/Cjud+/eLe7tnGPWarXa8PBw5Xbs2LHitc3OOZud17169aq479+/v7i348KFC8X97NmzlVuzM9Dv378X9+fPnxf3sbGx4r4evDkhlDghlDghlDghlDghlDghlDgh1KY853zx4kVxn56ebuv+Bw8eLO7Pnj2r3Jp95/H48ePF/enTp8V9Nc8xm9m1a1db+2bjzQmhxAmhxAmhxAmhxAmhxAmhNuVRymrr6ekp7r29vZXbvXv3itc22+kc3pwQSpwQSpwQSpwQSpwQSpwQSpwQalOeczb7NYnt6urqWtX7szl4c0IocUIocUIocUIocUIocUIocUKojj3nnJ2drdya/Rm8dk1MTKzq/TvVuXPnKrfXr1+v4ZNk8OaEUOKEUOKEUOKEUOKEUOKEUOKEUB17zvnx48fK7efPn23de2BgoLjv27evrftvVo1Go6WtU3lzQihxQihxQihxQihxQihxQihxQqiOPee8c+dO5Vav19u699LSUls7y5uamqrc2v2ZbUTenBBKnBBKnBBKnBBKnBBKnBCqY49Sjh49Wrm9efOmrXvv3LmzuHd3d7d1f6jVvDkhljghlDghlDghlDghlDghlDghVMeec166dKlya/ec89OnT8X9y5cvxb23t7etz9+onjx5UtzfvXvX8r337NlT3C9fvtzyvdeLNyeEEieEEieEEieEEieEEieEEieE6thzzr6+vsqtq6ureO3i4mJbn/348ePifubMmbbun2pmZqa4X79+vbj//v27ctuxY0fx2nv37hX3np6e4p7ImxNCiRNCiRNCiRNCiRNCiRNCiRNC1RuNRmkvjhvV0NBQcX///n1b9z9y5Ehxf/v2beWWfB43Pz9f3G/cuFHcp6enW/7sQ4cOFffPnz+3fO8Ay/59Q29OCCVOCCVOCCVOCCVOCCVOCNWxXxkruXLlSnFv9yil2a/OHBkZqdyuXr1avPbEiRMtPdP/a3Z2tnIbGxsrXvvnz5+2Pru/v79ya/Yz60TenBBKnBBKnBBKnBBKnBBKnBBKnBBqU35l7Nu3b8W92Z+qm5ycLO5LS0t//UxrpcnPu1avL/vtpRXR7FeSTk1NVW6nTp1a6cdJ4itjsJGIE0KJE0KJE0KJE0KJE0KJE0JtynPOdjX7E35zc3PFvfSn7lZbO+ec27ZtK147ODhY3MfHx4v76Ohoce9gzjlhIxEnhBInhBInhBInhBInhBInhHLOuQoWFhaK+4MHDyq3Zt8VbVezc87h4eHKrdk55fnz51t6JpxzwoYiTgglTgglTgglTgglTgglTgjlnBPWn3NO2EjECaHECaHECaHECaHECaHECaHECaHECaHECaHECaHECaHECaHECaHECaHECaHECaHECaHECaHECaHECaHECaG2NNmX/ZV9wOrz5oRQ4oRQ4oRQ4oRQ4oRQ4oRQ/wKwMQ6ZNhWvQAAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3IoNw0g3EYbw"
      },
      "source": [
        "slicing data "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ngcStpgm_yPX"
      },
      "source": [
        "x_train = x[:60000]\r\n",
        "y_train = y[:60000]\r\n",
        "x_test = x[60000:]\r\n",
        "y_test = y[60000:]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8dgeYFYPEwSu"
      },
      "source": [
        "shuffling the data "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KDjvVMIpCffn"
      },
      "source": [
        "# shuffle_index = np.random.permutation(60000)    #while the mnist data is already sliced in training and testing \r\n",
        "# x_train, y_train = x[shuffle_index], y[shuffle_index]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AK9NBoDkHAuL"
      },
      "source": [
        "creating a 0 detector"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uTAAOsvOHFp2"
      },
      "source": [
        "y_train = (y_train.astype(np.int8))\r\n",
        "y_test = (y_test.astype(np.int8))\r\n",
        "\r\n",
        "y_train_0  = (y_train==0)\r\n",
        "y_test_0 = (y_train==0)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YGA42831HNkm"
      },
      "source": [
        "# this is logistic regression "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "235Zzss2HRl1",
        "outputId": "598933e3-3708-4d41-9f05-b4d24af8aa06"
      },
      "source": [
        "clf = LogisticRegression(tol=.1)\r\n",
        "clf.fit(x_train, y_train_0)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
            "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
            "\n",
            "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
            "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
            "Please also refer to the documentation for alternative solver options:\n",
            "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
            "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n",
              "                   intercept_scaling=1, l1_ratio=None, max_iter=100,\n",
              "                   multi_class='auto', n_jobs=None, penalty='l2',\n",
              "                   random_state=None, solver='lbfgs', tol=0.1, verbose=0,\n",
              "                   warm_start=False)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aD1yMd4tNYWO"
      },
      "source": [
        "### prediction"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HrnGRfPjNbfw",
        "outputId": "aeeda159-ebe4-4645-de78-875d13473dbb"
      },
      "source": [
        "clf.predict([plot_this])\r\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ True])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "P-6c2sPRNnSe"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1sFOHR9cR3vB"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}